{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../src/svelte/unittest/src/wrk.svelte",
    "../../../src/svelte/unittest/src/featuretest.svelte",
    "../../../src/svelte/unittest/src/leftpanel.svelte",
    "../../../src/svelte/unittest/src/mainpanel.svelte",
    "../../../src/svelte/unittest/src/loginout.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport { importState } from './store.js'\nimport {onMount} from 'svelte'\n\nexport let options = {\n    url:'',\n    thread: 5,\n    connection:10,\n    duratoin:3\n}\nlet el\nlet className\nlet tree = importState('tree')\nexport let myself\nonMount(async ()=>{\n    el.className.split(' ').some(function(n){\n        if (/^svelte/.test(n)) {className = n; return true}\n    })\n    if ($tree){\n        render()\n    }\n})\nconst render = () =>{\n    const fields = [\n            { name:'url', field: 'url', type: 'text', required: true ,html:{caption:'URL', attr:'placeholder=\"http://\" style=\"width:300px\"'}},\n            { name:'thread', field: 'thread', type: 'int', required: true,html:{text:'concurrent thread(-t)'} },\n            { name:'connection', field: 'connection', type: 'int', required: true, html:{text:'connection/thread(-c)'} },\n            { name:'duration', field: 'duration', type: 'int', required: true,html:{text:'testing duration(-d)'}},\n        ]\n    const record = {\n            url:options.url,\n            thread:options.thread || 5,\n            connection:options.connection || 10,\n            duration:options.duration || 3\n        }\n    const prefix = 'wrk'\n    // name will be converted to be \"id\" of <input>,\n    // so to set a unique name is necessary\n    fields.forEach((f)=>{\n        f.name = prefix + f.name\n    })\n    let urecord = {}\n    for (let name in record){\n        urecord[prefix+name] = record[name]\n    }\n\n    if (w2ui['wrk-form']) w2ui['wrk-form'].destroy()\n    jQuery(el.querySelector('.form')).w2form({ \n        name     : 'wrk-form',\n        header   : 'Benchmark by wrk',\n        style:'width:500px',\n        fields: fields,\n        record: urecord,\n        actions: {\n            reset: function () {\n                this.clear();\n            },\n            save: function () {\n                var record = {}\n                var len = prefix.length\n                for(let name in this.record){\n                    record[name.substr(len)] = this.record[name]\n                }\n                if ((!options.validate) || options.validate(record)){\n                    start_benchmark(record)\n                }                \n            }\n        }\n    });\n    el.querySelector('button[name=\"save\"]').innerHTML = 'Run'    \n}\n\ntree.subscribe(tree =>{\n    if ($tree == null){\n        if (w2ui['wrk-form']) w2ui['wrk-form'].destroy()\n        return\n    }else if (el){\n        render()\n    }    \n})\n\nconst start_benchmark = (record) =>{\n    w2ui['wrk-form'].lock('Testing',true)\n    var path = 'Testing.Benchmark'\n    //var path = 'Testing.SubprocessTest'\n    var flag = 0\n    var url = record.url\n    if (!/^http/.test(url)) url = location.protocol + '//' + location.host + (url.substr(0,1) == '/' ? '' : '/') + url\n    var args = ['-t', record.thread, '-c', record.connection,'-d',record.duration,url]\n    var kw = {}\n    var pbMsg = null\n    var cmd =  $tree.call(path,args,kw,pbMsg)\n    var kill = false\n    if (kill){\n        setTimeout(function(){\n            cmd.kill().done(function(response){\n                console.log(response)\n            }).fail(function(retcode,errmsg){\n                console.log([retcode,errmsg])\n            })\n        },1000)\n    }\n    const addLine = (s) => {\n        let div = document.createElement('pre')\n        div.innerText = s\n        el.querySelector('.result').appendChild(div)\n    }\n    cmd.always(function(){\n        w2ui['wrk-form'].unlock()\n    }).progress(function(response){\n        addLine(response)\n    }).done(function(response){\n        addLine(response)\n    }).fail(function(retcode, errmsg){\n        addLine('Error: '+retcode+' '+errmsg)\n    })                \n}\n</script>\n<style>\n.result pre{\n    font-family:Courier !important;\n}\n</style>\n<div>\n<slot>\n    <p>Please note: <a href=\"https://github.com/wg/wrk\" target=\"blank\">Wrk</a> is required to be installed on server for benchmark working</p>\n    <div bind:this={el}>\n        <div class=\"form\"/>\n        <div class=\"result\"><pre></pre></div>\n    </div>\n</slot>\n</div>\n",
    "<script context=\"module\">\nlet hashCount = 0\n</script>\n<script>\nimport { importState, refreshRequestHeaders, event } from './store.js'\nimport { default as Tooltip, scanTooltip} from './tooltip.svelte'\nimport {onMount} from 'svelte'\nexport let name // string\nexport let priority = 0 // less got more priority\nexport let expectXML // a XML DOM element for settings\nexport let queryXML // a XML DOM element for settings\nexport let myself \nlet el\nlet className\nlet config = importState('config')\nlet tree = importState('tree')\nlet requestHeaders = importState('requestHeaders')\nlet registerAutoTesting = importState('registerAutoTesting')\n\nlet query = {}\n// compiler willl complain myself, but actually myself is set in main.js\n\nhashCount += 1\nlet formName = 'featuretest-form' + hashCount\nconst prefix = 'featuretest' + hashCount\n\nonMount(async ()=>{\n    query.url = queryXML.querySelector('url').innerText\n    query.method = queryXML.querySelector('method') ? queryXML.querySelector('method').innerText.trim().toLowerCase() : 'get'\n    query.data = queryXML.querySelector('data') ? JSON.parse(unescape(queryXML.querySelector('data').innerText)) : []\n    // convert <expect> to pretty DOM element\n    let lintExpectedLines =  []\n    let pat = /^\\/(.+)\\/([ig]*)$/\n\n    queryXML.remove()\n\n    // collect expected value\n    expectXML.querySelectorAll('status').forEach(function(ele){\n        let text = ele.innerText.trim()\n        if (text=='') return\n        if (pat.test(text)) {\n            let m = text.match(pat)\n            expects.status.push(new RegExp(m[1],m[2]))\n        }else{\n            expects.status.push(new RegExp(text))\n        }\n        lintExpectedLines.push('<div class=\"status\">' + text + '</div>')\n    })\n    expectXML.querySelectorAll('header').forEach(function(ele){\n        let text = ele.innerText.trim()\n        if (text=='') return\n        if (pat.test(text)) {\n            let m = text.match(pat)\n            expects.header.push(new RegExp(m[1],m[2]))\n        }else{\n            expects.header.push(new RegExp(text))\n        }\n        lintExpectedLines.push('<div class=\"header\">' + text + '</div>')\n    })\n    expectXML.querySelectorAll('response').forEach(function(ele){\n        let text = ele.innerText.trim()\n        if (text=='') return\n        if (pat.test(text)) {\n            let m = text.match(pat)\n            expects.response.push(new RegExp(m[1],m[2]))\n        }else{\n            expects.response.push(new RegExp(text))\n        }\n        lintExpectedLines.push('<div class=\"response\">' + text + '</div>')\n    })\n\n\n    if (expectXML.querySelector('validate')) {\n        let code = unescape(expectXML.querySelector('validate').innerText)\n        expects.validate =  (new Function('\"use strict\";return (' + code +')'))()\n        expects.validateSource = code\n    }\n\n    if (expectXML.querySelector('responseType')) expects.responseType = expectXML.querySelector('responseType').innerText\n\n    if (expectXML.querySelector('renderResponse')) {\n        let code = unescape(expectXML.querySelector('renderResponse').innerText)\n        expects.renderResponse =  (new Function('\"use strict\";return (' + code +')'))()\n        expects.renderResponseSource = code\n    }\n\n    // set default condition to status=200 if there is none given\n    if (expects.status.length + expects.header.length + expects.response.length == 0 && (!expectXML.querySelector('validate'))){\n        expects.status.push(200)\n    }\n\n    if (expectXML.querySelector('notes')) lintExpectedLines.push('<div class=\"notes\">' + expectXML.querySelector('notes').innerHTML + '</div>')\n\n    expectXML.remove()\n   \n    // className could be \"\" if there is no style settting on it,\n    // Svelte compiler would not assign. But if there are multip instance of this component,\n    // they share the same class name.\n    el.className.split(' ').some(function(n){\n        if (/^svelte/.test(n)) {className = n; return true}\n    })\n\n    // increase this value to create uniqe w2form\n    hashCount += 1\n\n    if ($tree){\n        refreshRequestHeaders().done(()=>{\n            render().done(()=>{\n                // call registerAutoTesting if this page is created by AutoTest compoenent (autotest.svelte)\n                if ($registerAutoTesting){\n                    $registerAutoTesting(()=>{\n                        return startTeaturetest()\n                    },priority)\n                }\n                // autotest need this event to know that it \n                // can start to call startTeaturetest()\n                event.fire('featuretest-ready')\n            })\n        })\n    }\n\n})\n\n\n// expected values defined in loaded htmls\nlet expects = { \n    status:[],\n    header:[],\n    response:[]\n}\nconst expectsChecker =  (response, xhr) => {\n    let pass = true\n    let messages = []\n    if (expects.status.length){\n        let s = new String(xhr.status)\n        expects.status.some(function(re){\n            if (!s.match(re)){\n                messages.push('status error')\n                pass = false\n                return true\n            }\n        })\n    }\n    if (expects.header.length){\n        let allHeaders = xhr.getAllResponseHeaders()\n        expects.header.some(function(re){\n            if (!allHeaders.match(re)){\n               messages.push('header error')\n                pass = false\n                return true\n            }\n        })\n    }\n    if (expects.response.length){\n\n        if (typeof response == 'object'){\n            // covert object to json if necessary\n            response = JSON.stringify(response)\n        }\n        \n        expects.response.some(function(re){\n            if (!response.match(re)){\n                messages.push('response error')\n                pass = false\n                return true\n            }\n        })\n    }\n    return [pass, messages]\n}\n\n\nconst render = () =>{\n\n    let textarea_attr = 'cols=\"100\" style=\"white-space:pre;width:98%; ' //should( + 'height:40px\"  <-- end quote )\n    // page #0\n    let fields = [\n            { name:'url',field: 'url', type: 'textarea', \n                required: true ,html:{\n                    text:'<br/><a target=\"_blank\" href=\"'+escape(query.url)+'\">' + query.url+'</a>',\n                    caption:'URL To ' + query.method, \n                    attr:textarea_attr+'height:50px\" placeholder=\"http://\"'}\n            },\n        ]\n    let record = {\n        url:query.url,\n    }\n    // add into query.data\n    query.data.forEach((item)=>{\n        let fieldEntry = jQuery.extend({},item) //copy this dict\n        fieldEntry.field = fieldEntry.name\n        \n        // assign label\n        if (fieldEntry.html && fieldEntry.html.caption) {} //pass\n        else if (fieldEntry.html) fieldEntry.html.caption = fieldEntry.name\n        else fieldEntry.html = {caption:fieldEntry.name}\n\n        fields.push(fieldEntry)\n        record[fieldEntry.name] = fieldEntry.value || ''\n    })\n\n    // page #1: benchmark tab\n    fields.push({name:'benchmark_connections',html:{caption:'Connections',text:' cocurrent connections',page:1}})\n    fields.push({name:'benchmark_threads',html:{caption:'Threads',text:' to make connections',page:1}})\n    fields.push({name:'benchmark_duration',html:{caption:'Duration',text:' seconds to run',page:1}})\n    fields.push({name:'benchmark_headers',type:'textarea',html:{\n        attr:textarea_attr+'height:100px\"', \n        caption:'Headers',\n        text:'request headers, line by line; auto generated by <a target=\"_blank\" href=\"'+$config.allHeadersUrl+'\">' + $config.allHeadersUrl + '</a>',\n        page:1}\n        })\n    record['benchmark_threads'] = 5\n    record['benchmark_connections'] = 10\n    record['benchmark_duration'] = 3\n    let benchmark_headers = []\n    let headers = ['Accept-Encoding','Cookie','Accept-Language','User-Agent']\n    headers.forEach((name)=>{\n        benchmark_headers.push(name + ': ' + $requestHeaders[name])\n    })\n    record['benchmark_headers'] = benchmark_headers.join('\\n')\n\n    // page #2: expact tab\n    let linebyline = '<br/>line by line, <tooltip text=\"more about status,header and response\" url=\"/page/help.html#status\" size=\"600x600\" tip=\"conditions to validate testing result\">'\n    fields.push({name:'expect_status',html:{caption:'Status',page:2,attr:textarea_attr+'height:40px\"',text:linebyline},type:'textarea'})\n    fields.push({name:'expect_header',html:{caption:'Header',page:2,attr:textarea_attr+'height:60px\"'},type:'textarea'})\n    fields.push({name:'expect_response',html:{caption:'Response',page:2,attr:textarea_attr+'height:80px\"'},type:'textarea'})\n    fields.push({name:'expect_validate',html:{caption:'validate()',page:2,attr:textarea_attr+'height:100px\"',text:'<br/><tooltip text=\"more about validate(), responseType and renderResponse()\" url=\"/page/help.html#validate\" tip=\"customize reponse validation and how to render response on browser\">'},type:'textarea'})\n    fields.push({name:'expect_responseType',html:{caption:'responseType',page:2}})\n    fields.push({name:'expect_renderResponse',html:{caption:'renderResponse()',page:2,attr:textarea_attr+'height:100px\"'},type:'textarea'})\n    record['expect_status'] = expects.status.join('\\n')\n    record['expect_header'] = expects.header.join('\\n')\n    record['expect_response'] = expects.response.join('\\n')\n    record['expect_validate'] = expects.validateSource\n    record['expect_responseType'] = expects.responseType\n    record['expect_renderResponse'] = expects.renderResponseSource\n    // name will be converted to be \"id\" of <input>,\n    // so to set a unique name is necessary\n    fields.forEach((f)=>{\n        f.name = prefix + f.name\n    })\n    let urecord = {}\n    for (let name in record){\n        urecord[prefix+name] = record[name]\n    }\n    jQuery(el.querySelector('.form')).w2form({ \n        name     : formName,\n        header   : name,\n        style:'width:100%',\n        fields: fields,\n        tabs:[\n            {id:'featuretest',text:'Parameters'},\n            {id:'benchmark',text:'Benchmark'},\n            {id:'expect',text:'Expect'},\n        ],\n        record:urecord,\n        toolbar:{\n            items:[\n                {id:'run',text:'Run Test',icon:'fas fa-play-circle', tooltip:'Run this testing case'},\n                {id:'benchmark',text:'Do Benchmark',icon:'fas fa-running', tooltip:'Benchmarking this testing case'},\n                {type:'break'},\n                {id:'reset',text:'Reset',icon:'fas fa-pause', tooltip:'clean testing results'},\n                {type:'spacer'},\n                {id:'savecase',text:'New Case',icon:'fas fa-running',tooltip:'Save as a new testing case'},\n            ],\n            onClick:function(evt){\n                switch(evt.target){\n                    case 'run':\n                        startTeaturetest() \n                        break\n                    case 'benchmark':\n                        startBenchmark()\n                        break\n                    case 'reset':\n                        //miso\n                        el.querySelector('.http-response.result .result-check').innerHTML = ''\n                        el.querySelector('.http-response.result .result-content').innerHTML = ''\n                        el.querySelector('.http-response.result').style.display = 'none'\n                        break\n                }\n            }\n        },\n        actions:{\n\n        }\n    });\n    \n    //el.querySelector('button[name=\"save\"]').style.display = 'none'\n    //el.querySelector('button[name=\"reset\"]').style.display = 'none'\n    scanTooltip(Tooltip, w2ui[formName].box)\n\n    return jQuery.when()\n}\ntree.subscribe(tree =>{\n    if ($tree == null){\n        if (w2ui['featuretest-form']) w2ui['featuretest-form'].destroy()\n        return\n    }\n    //else if (el){\n    //    render()\n    //}    \n})\n\nconst getRecordFromForm = (theform)=>{\n    // convert form data to query data\n    let record = {}\n    let len = prefix.length\n    if (theform) {\n        query.data.forEach((item)=>{\n            record[item.name] = theform.record[prefix + item.name]\n        })\n    }else{\n        throw 'there is no w2form of name:' + formName\n    }\n    return record\n}\n\nexport const startTeaturetest = () =>{\n    let theform = w2ui[formName]\n    let record = getRecordFromForm(theform)\n    let promise = new jQuery.Deferred()\n    theform.lock('Testing',true)\n    let url = theform.record[prefix + 'url']\n    let options = {\n        url:url,\n        data:record,\n    }\n    if (expects.responseType){\n        options.xhr = function(){\n            let xhr = new XMLHttpRequest();\n            xhr.responseType= expects.responseType\n            return xhr;\n        }\n    }\n    // make query\n    let resultContent = el.querySelector('.http-response.result .result-content')\n    let resultCheck = el.querySelector('.http-response.result .result-check')\n    let p = query.method == 'get' ? jQuery.get(options) : jQuery.post(options)\n    p.done(function(response,status, xhr){\n        el.querySelector('.http-response.result').style.display = 'block'        \n\n        let renderedResponse \n        if (expects.renderResponse) renderedResponse  = expects.renderResponse(response)\n        else if (expects.responseType && expects.responseType.toLowerCase() == 'json') {\n            // auto-convert json to pretty string\n            renderedResponse = JSON.stringify(response,null,2)\n        } else {\n            renderedResponse = response\n        }\n\n        resultContent.innerHTML = \n`<pre class=\"header\">${xhr.status} ${xhr.statusText}\n${xhr.getAllResponseHeaders().trim()}</pre>\n<pre class=\"response\">\n${renderedResponse}\n</pre>`\n\n        let next = (pass,messages)=>{\n            //let [pass = passMessages[0], messages = passMessages[1]\n            if (typeof messages == 'string') messages = [messages]\n            resultCheck.classList.add(pass ? 'pass' : 'no-pass')\n            resultCheck.classList.remove(pass ? 'no-pass' : 'pass')\n            if (messages) resultCheck.innerText = messages.join('\\n')\n            promise.resolve(pass,messages)\n\n        }\n\n        if ( expects.validate){\n            let p = new jQuery.Deferred()\n            p.done((messages)=>{\n                next(true,messages)\n            }).fail((messages)=>{\n                next(false,messages)\n            })\n            expects.validate(response,xhr,p)\n        }\n        else{\n            let [pass,messages]  = expectsChecker(response,xhr)\n            next(pass,messages)\n        }\n\n    })\n    .fail(function(xhr){\n        el.querySelector('.http-response.result').style.display = 'block'\n        resultCheck.classList.remove('pass')\n        resultCheck.classList.add('no-pass')\n        resultContent.innerHTML = '<pre class=\"header\">' + xhr.status+ ' ' + xhr.statusText + '\\n' + xhr.getAllResponseHeaders() + '</pre><pre class=\"response\">' + xhr.responseText + '</pre>'\n        promise.reject(xhr)\n    })\n    .always(()=>{\n       theform.unlock()\n    })\n    return promise\n}\n\n\nexport const startBenchmark = () =>{\n    let theform = w2ui[formName]\n    let record = getRecordFromForm(theform)\n    // add settings of benchmark into record\n    let benchmarkFields = ['threads','connections','duration','cookie','headers']\n    benchmarkFields.forEach((name)=>{\n        record[name] = theform.record[prefix + 'benchmark_' + name]\n    })    \n    // start benchmark process\n    theform.lock('Testing',true)\n    let path = 'Testing.Benchmark'\n    \n    //var path = 'Testing.SubprocessTest'\n    //let flag = 0\n    \n    let headers = []\n    //if (record.cookie) headers.push('Cookie:' + record.cookie)\n    if (record.headers){\n        record.headers.split('\\n').forEach((line)=>{\n            line = line.trim()\n            if (line.length) headers.push(line)\n        })\n    }\n    let args = ['-t', record.threads, '-c', record.connections, '-d', record.duration, '--timeout', 10 + record.duration]\n    let readableArgs = args.slice()\n    headers.forEach((header) =>{\n        args.push('-H')\n        readableArgs.push('-H')\n\n        args.push(header)\n        readableArgs.push('\"' + header.replace('\"','\\\\\"') + '\"')\n        \n    })\n\n    let url = theform.record[prefix + 'url']\n    if (!/^http/.test(url)) url = location.protocol + '//' + location.host + (url.substr(0,1) == '/' ? '' : '/') + url\n    args.push(url)\n    readableArgs.push('\"' + url.replace('\"','\\\\\"') + '\"')\n\n    let kw = {}\n    let pbMsg = null\n    let cmd =  $tree.call(path,args,kw,pbMsg)\n    \n    /*\n    let kill = false\n    if (kill){\n        setTimeout(function(){\n            cmd.kill().done(function(response){\n                console.log(response)\n            }).fail(function(retcode,errmsg){\n                console.log([retcode,errmsg])\n            })\n        },1000)\n    }\n    */\n\n    el.querySelector('.result.http-response').innerHTML = ''\n    el.querySelector('.result.http-response').style.display = 'block'\n\n    const addResult = (s) => {\n        let div = document.createElement('pre')\n        div.innerText = s\n        el.querySelector('.result').appendChild(div)\n    }\n    cmd.always(function(){\n        theform.unlock()\n    }).progress(function(response){\n        addResult(response)\n    }).done(function(response){\n        addResult(response)\n    }).fail(function(retcode, errmsg){\n        addResult('Error: '+retcode+' '+errmsg)\n    })                \n}\n</script>\n<style>\n\n/* Testing related starts */\n:global(.http-response.expected){\n    text-align:left;\n    white-space:normal;\n    background-color:white !important;\n    border-radius:5px;\n    padding-left:15px;\n    padding-bottom:10px;\n}\n:global(.http-response.expected::before){\n    content:\"Expected\";\n    padding:10px;\n    margin-left:-15px;\n    display:block;\n    border-bottom:solid 1px #c4c2c2;\n    margin-bottom:10px;\n}\n:global(.http-response.expected .status){\n    font-weight: bold;\n}\n:global(.http-response.expected .header){\n    font-weight: bold;\n}\n:global(.http-response.expected .response){\n    margin-top:1em;\n    font-weight: bold;\n}\n\n:global(.http-response){\n    font-family: monospace;\n    white-space: pre;\n    width:100%;\n    border-radius:5px;\n    padding:0px;\n    border:solid 1px #dbdbdb;  \n    overflow:auto;\n\n}\n:global(.http-response.result){\n    display:none;\n\n}\n:global(.http-response.result::before){\n    content:\"Result\";\n    padding:10px;\n    display:block;\n    border-bottom:solid 1px #c4c2c2;\n    margin-bottom:10px;\n}\n:global(.http-response pre){\n    width:100%;\n    padding:0px 10px;\n    margin:0;\n    overflow-x:auto;\n}\n:global(.http-response .status){\n    /* 載入的 page 當中會有動態增加的內容，所以用 :global() */\n    color:#888;\n}\n:global(.http-response .header){\n    /* 載入的 page 當中會有動態增加的內容，所以用 :global() */\n    color:#888;\n}\n:global(.http-response .response){\n    /* 載入的 page 當中會有動態增加的內容，所以用 :global() */\n}\n:global(.http-response .result-check.pass){\n}\n:global(.http-response .result-check.pass::before){\n    content: \"PASS\";\n    margin-left: 2px;\n    background-color: #46fd3b;\n    padding: 0px 10px;\n    display: inline-block;\n    line-height: 20px;\n    font-size: 14px;\n}\n:global(.http-response .result-check.no-pass){\n}\n:global(.http-response .result-check.no-pass::before){\n    content: \"NO-PASS\";\n    margin-left: 2px;\n    color:white;\n    background-color: #fd583b;\n    padding: 0px 10px;\n    display: inline-block;\n    line-height: 20px;\n    font-size: 14px;\n    border-radius: 5px;\n}\n\n.featuretest-box{\n}\n/* Testing related end */\n</style>\n<div bind:this={el}>\n    <slot>\n        <div >\n            <table style=\"width:100%;vertical-align:top\">\n                <tr>\n                    <td style=\"min-width:250px;width:100%;vertical-align:top\"><div class=\"form\"/></td>\n                </tr>\n                <tr>\n                    <td style=\"vertical-align:top\">\n                        <div class=\"result http-response\">\n                            <div class=\"result-check\"></div>\n                            <div class=\"result-content\"></div>\n                        </div>\n                    </td>\n                </tr>\n\n            </table>\n            \n        </div>\n    </slot>\n    <!-- let svelte compiler to include related css -->\n    <div style=\"display:none\" class=\"http-response pass no-pass expected\"><pre></pre></div>\n</div>\n",
    "<script>\nimport { importState, setState, event } from './store.js'\nimport { loadNode } from './mainpanel.svelte'\nimport { autoTestStart } from './autotest.svelte'\nlet namespace = importState('namespace')\nlet user = importState('user')\nlet message = importState('message')\nlet config = importState('config')\nlet layout = importState('layout')\nlet username = ''\n\n// inital nodes on the sidebar\nlet nodes = [\n    { id: 'overview', text: 'Overview', img: 'icon-folder', expanded: true, group: true,\n        nodes: [ \n             { id: 'settings', text: 'Settings', img:'icon-folder' }\n            ,{ id: 'golang', text: 'Go', img: 'icon-folder', expanded: true , \n                nodes: [\n                    { id: 'goroute', text: 'Route', icon: 'fa-star-empty' },\n                ]}\n            ,{ id: 'python', text: 'Python', img: 'icon-folder', expanded: true, \n                nodes: [\n                    { id: 'pyroute', text: 'Route', icon: 'fa-star-empty' },\n                    { id: 'pyreactor', text: 'Reactor,Event Loops', icon: 'fa-star-empty' },\n                ]}\n            ,{ id:'authentication',text:'Authentication', img:'icon-folder', expanded: true,\n                nodes:[\n\n                ]}\n        ]\n    }\n]\nfunction renderToolbar(){\n    if (w2ui['LeftPanelToolbar']) w2ui['LeftPanelToolbar'].destroy()\n    jQuery('.LeftPanelToolbar').w2toolbar({\n        name:'LeftPanelToolbar',\n        items:[\n            //{id:'newgroup',img:'fas fa-layer-group',tooltip:'Add Folder Node'},\n            //{id:'newsubgroup',img:'fas fa-folder',tooltip:'Add Sub Folder'},\n            //{id:'newtest',img:'fas fa-vial',tooltip:'Add Testing Node'},\n            {type:'spacer'},\n            //{id:'remove',img:'fas fa-trash',tooltip:'Remove Current Node'},\n            //{type:'break'},\n            {id:'refresh',img:'fas fa-redo',tooltip:'Refersh sidebar'},\n        ],\n        onClick:function(evt){\n            \n            switch(evt.target){\n                case 'refresh':\n                    render(true)\n                    break\n            }\n        }\n    })\n}\nfunction render(){\n    let url = $config.allSidebarNodesUrl\n    jQuery.getJSON(url,(testing_nodes)=>{\n        if (w2ui['LeftPanel']) w2ui['LeftPanel'].destroy()\n        jQuery('.LeftPanel').w2sidebar({\n            name: 'LeftPanel',\n            nodes: nodes.concat(testing_nodes),\n            onClick:function(evt){\n                evt.done(()=>{\n                    if (evt.node.url || evt.node.testings) loadNode(evt.node)\n                })\n            }\n        }); \n        message.set('sidebar refreshed')\n    }).fail(function(err){\n        w2alert(err.responseText)\n    })\n}\n\nuser.subscribe(value =>{\n    if (value == null) return\n    username = $user.username\n    if (username == 'guest'){\n        //not been login or has logout\n        if (w2ui['LeftPanel']) w2ui['LeftPanel'].destroy()\n    }else{\n        var rect = $layout.el('left').getBoundingClientRect()\n        jQuery('.LeftPanel').height(rect.height - 30)\n        renderToolbar()\n        render()\n    }\n})\n\n</script>\n<style>\n.LeftPanelToolbar{\n    height:30px;\n    background-color:#e6e6e6;\n}\n.LeftPanel{\n}\n</style>\n\n<div>\n<div class=\"LeftPanel\"></div>\n<div class=\"LeftPanelToolbar\"></div>\n</div>",
    "<script context=\"module\">\n    //auto generate page\n    let generateTestingTags = null\n    let renderPage = null\n    let renderContent = null\n    export function loadNode(node){\n        if (node.url && node.testings){\n            let promise = new jQuery.Deferred()\n            jQuery.get(node.url,async function(response){\n                let tags = generateTestingTags(node)\n                \n                //seperate .tabs from response, insert tabs in node to response\n                let p = response.indexOf('</tabs>')\n                let content;\n                if (p == -1){\n                    // collect existing content to tab \"Doc\"\n                    content = '<tabs>' + tags.tabs.join('') + '<tab data-id=\"Doc\">Doc</tab></tabs>' + '<div class=\"tab-content Doc\">' + response + '</div>'\n                }else{\n                    content = response.substring(0,p) + tags.tabs.join('') + response.substring(p) + tags.tabContents.join('') \n                }\n                renderContent(content,promise)\n            }).fail((e)=>{\n                promise.reject(e)\n            })\n            return promise\n        }\n        else if (node.url) {\n            return renderPage(node.url)\n        }\n        else if (node.testings) {\n            let tags = generateTestingTags(node)\n            let promise = new jQuery.Deferred()\n            let content = '<tabs>' + tags.tabs.join('') +'</tabs>' + tags.tabContents.join('')\n            renderContent(content,promise)\n            return promise\n        }\n        else return jQuery.when(true)\n    }\n</script>\n<script>\nimport { onMount, getContext, setContext} from 'svelte';\nimport { tick } from 'svelte';\nimport {  importState, setState, event } from './store.js'\nlet resetAutoTestingQueue = importState('resetAutoTestingQueue')\nlet mainTabs = importState('mainTabs')\nlet content = ''\nlet signleton\nlet className \nonMount(()=>{\n    signleton.className.split(' ').some(function(n){\n        if (/^svelte/.test(n)) {className = n; return true}\n    })\n})\n\nlet layout = importState('layout')\n\n/*\nfunction resize(){\n    // size the container \".mainpanel-content\" to fill parent container\n    let box = document.querySelector('.mainpanel-content')\n    let size = $layout.el('main').getBoundingClientRect()\n    box.style.width = size.width + 'px'\n    box.style.height = size.height + 'px'\n}\n*/\n\nrenderPage = function (url) {\n    var promise = new jQuery.Deferred()\n    jQuery.get(url,async function(response){\n        try{\n            renderContent(response, promise)\n        }catch(e){\n            console.warn(e)\n            promise.reject('renderPage error:' + e)\n        }\n    })\n    return promise\n}\n\n// node comes from left-panel\ngenerateTestingTags = function(node){\n    var promise = new jQuery.Deferred()\n    let testings = []\n    let tab = '    '\n    node.testings.forEach((testing) =>{\n        testings.push('<featuretest>')\n        testings.push('<priority>' + (testing.priority || 1) + '</priority>')\n        testings.push('<name>' + testing.name + '</name>')\n        testings.push(tab+'<query>')\n        testings.push(tab+tab+'<url>'+testing.query.url+'</url>')\n        if (testing.query.method){\n            testings.push(tab+tab+'<method>'+testing.query.method+'</method>')\n        }\n        if (testing.query.data) {\n            testings.push(tab+tab+'<data>'+escape(JSON.stringify(testing.query.data))+'</data>')\n        }\n        testings.push(tab+'</query>')\n        testings.push('    <expect>')\n        if (testing.expect.status) {\n            let statusArray = typeof testing.expect.status == 'string' ? [testing.expect.status] : testing.expect.status\n            statusArray.forEach((status) => {testings.push('        <status>' + status + '</status>')})\n        }\n        if (testing.expect.header) {\n            let headerArray = typeof testing.expect.header == 'string' ? [testing.expect.header] : testing.expect.header\n            headerArray.forEach((header) => {testings.push('       <header>' + header + '</header>')})\n        }\n        if (testing.expect.response){\n            let responseArray = typeof testing.expect.response == 'string' ? [testing.expect.response] : testing.expect.response\n            responseArray.forEach((response) => {testings.push('     <response>' + response + '</response>')})\n        }\n        if (testing.expect.notes){\n            testings.push('<notes>' + testing.expect.notes + '</notes>')    \n        }\n        if (testing.expect.validate) testings.push(tab+tab+'<validate>'+escape(testing.expect.validate.trim())+'</validate>')\n        if (testing.expect.responseType) testings.push(tab+tab+'<responseType>'+testing.expect.responseType.trim()+'</responseType>')\n        if (testing.expect.renderResponse) testings.push(tab+tab+'<renderResponse>'+escape(testing.expect.renderResponse.trim())+'</renderResponse>')\n\n        testings.push('    </expect>')\n        testings.push('</featuretest>')\n    })\n    var testingTags = testings.join('    \\n')\n\n    let benchmarkTag = node.benchmarks ? '<tab data-id=\"Benchmark\">Benchmark</tab>' : ''\n    return {\n        tabs:[' <tab data-id=\"Test\" data-active=\"1\">Test</tab>',benchmarkTag ],\n        tabContents:[`<div class=\"tab-content Test\">${testingTags}</div>`,\n                '<div class=\"tab-content Benchmark\"></div>']\n    }\n}\n\nrenderContent = async function(response,promise){\n    if (response.indexOf('<featuretest') > 0 || response.indexOf('<benchmark') > 0) {\n        response += `\n        <script>\n            var totalCount = document.querySelectorAll('.mainpanel-page featuretest').length\n            document.querySelectorAll('.mainpanel-page featuretest').forEach(function(featuretest,idx){\n                app.registerFeatureTest({\n                    target: featuretest.parentNode,\n                    props:{\n                        name: featuretest.querySelector('name').innerHTML,\n                        priority: parseInt(featuretest.querySelector('priority').innerText),\n                        expectXML:featuretest.querySelector('expect'),\n                        queryXML:featuretest.querySelector('query')\n                    }\n                })\n            })\n            // wait for featuretest component to be rendered.\n            var readyCount = 0\n            var listenerId = app.event.on('featuretest-ready',()=>{\n                readyCount += 1\n                if (readyCount == totalCount){\n                    app.event.off('featuretest-ready',listenerId)\n                    app.event.fire('mainpanel-ready')\n                }\n            })\n        <\\/script>`\n    }\n    \n    // clean queue of auto-test\n    if ($resetAutoTestingQueue) $resetAutoTestingQueue()\n    \n    response = '<div class=\"mainpanel-page\">' + response + '</div>'\n    jQuery('.mainpanel-content.'+className).html(response)\n    // wait DOM to be updated\n    await tick()\n\n    // size the container \".mainpanel-content\" to fill parent container\n    let box = $layout.el('main')//.querySelector('.mainpanel-content')\n\n    // add Classname to injected elements to let CSS take effecitve\n    box.querySelectorAll('.tab-content, code, .code, .code p, .code pre, .http-response, .http-response.pass, .http-response.no-pass').forEach(function(ele){\n        ele.classList.add(className)\n    })\n\n    let tabsEle = box.querySelector('tabs')\n    let tabs = []\n    let active_tab = ''\n    tabsEle.querySelectorAll('tab').forEach(function(ele){\n        tabs.push({id:ele.dataset['id'], caption:ele.innerHTML})\n        if (ele.dataset['active']) active_tab = ele.dataset['id']\n    })\n    let tabbox = $layout.get('main').tabs.box\n    let name = $layout.get('main').tabs.name\n    if (w2ui[name]) w2ui[name].destroy()\n    $layout.get('main').tabs = jQuery(tabbox).w2tabs({\n        name:name,\n        tabs:tabs,\n        active:active_tab,\n        onClick:function(evt){\n            active_tab = evt.target\n            evt.done(function(){\n                if (box.querySelector('.tab-content.active')){\n                    box.querySelector('.tab-content.active').classList.remove('active')\n                }\n                if (box.querySelector('.tab-content.'+active_tab+'.'+className)){\n                    box.querySelector('.tab-content.'+active_tab+'.'+className).classList.add('active')\n                    event.fire('mainpanel-active-tab',active_tab)\n                }\n            })\n        }\n    })\n    jQuery(tabsEle).hide()\n    $layout.showTabs('main')\n    w2ui[name].click(active_tab)\n    mainTabs.set(w2ui[name])\n\n    app.event.once('mainpanel-ready',()=>{\n        promise.resolve()\n    })\n}\n\n\n</script>\n<style>\n.mainpanel-content{\n    display:flex;\n    align-items:stretch;\n    flex-direction:column;\n    background-color:white;\n}\n\n/* \n方法一：\nBelow are CSS classes used by content in loadded page (ex. staticfile.html) by @html.\nThe Svelte does not append Svelte-specific class to them,\nSo we have to escalate :global()\n方法二：\n取得此component的classname，將此classname加入所有的相關class中\n*/\n.tab-content{\n    display: none;\n    width:100%;\n    background-color:white;\n    padding:15px;\n}\n.tab-content.active{\n    display:block;\n}\n.tab-content p{\n    padding-left:20px;\n}\ncode{\n    font-weight: bold;\n    background-color: #f5f5f5;\n    padding: 2px;\n    border-radius:2px;\n}\n.code pre{\n    margin:5px 0px;\n    padding:10px 20px;\n    font-size:1.0em;\n    outline: 1px solid #cccccc;\n    font-family:monospace;\n    background-color: cornsilk;\n}\n.code p{\n    margin:0;\n    padding:0;\n}\n\n:global(featuretest){\n    display:none;\n}\n:global(benchmark){\n    display:none;\n\n}\n</style>\n{#if true}\n    <div bind:this={signleton} class=\"mainpanel-content\"></div>\n{:else}\n    <!-- 為了讓Svelte將style中的css compile 進去，因為只有用到的css才會被compile進去 -->\n    <div class=\"tab-content active\"></div>\n    <div class=\"code\"><p></p><pre></pre></div>\n    <code/>\n    <div class=\"http-response pass error\"></div>\n    <div class=\"http-response\"><div class=\"header\"></div></div>\n{/if}",
    "<script>\n/*\nEvents:\n    1. login-succeed, 此listener會在login成功的event之前(aka setState(\"user\") 事件）\n    先被呼叫。 SDK 利用來建立tree物件，讓其他收到 login 成功事件的listener可使用\n\n    2.then  setState(\"user\",{username:<not guest>}), when login succeed\n*/\nimport { onMount } from 'svelte';\nimport { importState, setState, event } from './store.js'\nlet config = importState('config')\nlet user = importState('user')\nlet username = 'guest'\nfunction doLogin(_username,_password,callback){\n    let data\n    if (_username){\n        data = {username:_username,password:_password}\n    }else{\n        data = {}\n    }\n    jQuery.getJSON($config.loginUrl,data, function(response){\n        if (response.username)  {\n            username = response.username\n            user.set({username:username})\n            if (callback) callback(true,response)           \n        }\n        else {\n            if (callback) callback(false)\n        }\n    })\n\n}\nonMount(async ()=>{\n    doLogin(null,null)\n})\nfunction logout(){\n    w2confirm(\n        'Are you sure to logout?',\n        function(yes){\n            if (yes != 'Yes') return\n            jQuery.get($config.logoutUrl,function(response){\n                username = 'guest'\n                user.set({username:username})\n            })\n        }\n    )\n}\nfunction login(){\n    w2popup.open({\n        title:'Login',\n        body:jQuery('.loginform-template .loginform').clone(),\n        buttons:'<button class=\"w2ui-btn login\">Login</button>'\n    })\n    jQuery('#w2ui-popup button.login').on('click',function(){\n        let name = jQuery('#w2ui-popup input.username').val()\n        let password = jQuery('#w2ui-popup input.password').val()\n        if (name && password){\n            doLogin(name,password,function(success,response){\n                if (success) {\n                    w2popup.close()\n                }\n                else jQuery('#w2ui-popup .message').html('try again')\n            })\n        }\n    })\n}\n</script>\n<style>\n.loginform{\n\n}\n.loginform input{\n    display: block;\n    padding: 10px;\n}\n</style>\n\n<span class=\"fas fa-user\"></span>\n{#if username=='guest'}\n    <a  href=\"javascript:void(0);\" on:click=\"{login}\"><span>Login</span></a>\n{:else}\n    <a  href=\"javascript:void(0);\" on:click=\"{logout}\"><span title=\"{username}\">Logout</span></a>\n{/if}\n\n<div style=\"display:none\" class=\"loginform-template\">\n    <div class=\"loginform w2ui-center\">\n        <div class=\"message\">&nbsp;</div>\n        <input class=\"username\" placeholder=\"username\"/>\n        <input class=\"password\" type=\"password\"/>\n    </div>\n</div>"
  ],
  "names": [],
  "mappings": "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"
}