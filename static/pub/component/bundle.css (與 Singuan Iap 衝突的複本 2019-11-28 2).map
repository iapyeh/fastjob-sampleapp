{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../../src/svelte/unittest/src/wrk.svelte",
    "../../../src/svelte/unittest/src/featuretest.svelte",
    "../../../src/svelte/unittest/src/autotest.svelte",
    "../../../src/svelte/unittest/src/leftpanel.svelte",
    "../../../src/svelte/unittest/src/mainpanel.svelte",
    "../../../src/svelte/unittest/src/loginout.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport { importState } from './store.js'\nimport {onMount} from 'svelte'\n\nexport let options = {\n    url:'',\n    thread: 5,\n    connection:10,\n    duratoin:3\n}\nlet el\nlet className\nlet tree = importState('tree')\nexport let myself\nonMount(async ()=>{\n    el.className.split(' ').some(function(n){\n        if (/^svelte/.test(n)) {className = n; return true}\n    })\n    if ($tree){\n        render()\n    }\n})\nconst render = () =>{\n    const fields = [\n            { name:'url', field: 'url', type: 'text', required: true ,html:{caption:'URL', attr:'placeholder=\"http://\" style=\"width:300px\"'}},\n            { name:'thread', field: 'thread', type: 'int', required: true,html:{text:'concurrent thread(-t)'} },\n            { name:'connection', field: 'connection', type: 'int', required: true, html:{text:'connection/thread(-c)'} },\n            { name:'duration', field: 'duration', type: 'int', required: true,html:{text:'testing duration(-d)'}},\n        ]\n    const record = {\n            url:options.url,\n            thread:options.thread || 5,\n            connection:options.connection || 10,\n            duration:options.duration || 3\n        }\n    const prefix = 'wrk'\n    // name will be converted to be \"id\" of <input>,\n    // so to set a unique name is necessary\n    fields.forEach((f)=>{\n        f.name = prefix + f.name\n    })\n    let urecord = {}\n    for (let name in record){\n        urecord[prefix+name] = record[name]\n    }\n\n    if (w2ui['wrk-form']) w2ui['wrk-form'].destroy()\n    jQuery(el.querySelector('.form')).w2form({ \n        name     : 'wrk-form',\n        header   : 'Benchmark by wrk',\n        style:'width:500px',\n        fields: fields,\n        record: urecord,\n        actions: {\n            reset: function () {\n                this.clear();\n            },\n            save: function () {\n                var record = {}\n                var len = prefix.length\n                for(let name in this.record){\n                    record[name.substr(len)] = this.record[name]\n                }\n                if ((!options.validate) || options.validate(record)){\n                    start_benchmark(record)\n                }                \n            }\n        }\n    });\n    el.querySelector('button[name=\"save\"]').innerHTML = 'Run'    \n}\n\ntree.subscribe(tree =>{\n    if ($tree == null){\n        if (w2ui['wrk-form']) w2ui['wrk-form'].destroy()\n        return\n    }else if (el){\n        render()\n    }    \n})\n\nconst start_benchmark = (record) =>{\n    w2ui['wrk-form'].lock('Testing',true)\n    var path = 'Testing.Benchmark'\n    //var path = 'Testing.SubprocessTest'\n    var flag = 0\n    var url = record.url\n    if (!/^http/.test(url)) url = location.protocol + '//' + location.host + (url.substr(0,1) == '/' ? '' : '/') + url\n    var args = ['-t', record.thread, '-c', record.connection,'-d',record.duration,url]\n    var kw = {}\n    var pbMsg = null\n    var cmd =  $tree.call(path,args,kw,pbMsg)\n    var kill = false\n    if (kill){\n        setTimeout(function(){\n            cmd.kill().done(function(response){\n                console.log(response)\n            }).fail(function(retcode,errmsg){\n                console.log([retcode,errmsg])\n            })\n        },1000)\n    }\n    const addLine = (s) => {\n        let div = document.createElement('pre')\n        div.innerText = s\n        el.querySelector('.result').appendChild(div)\n    }\n    cmd.always(function(){\n        w2ui['wrk-form'].unlock()\n    }).progress(function(response){\n        addLine(response)\n    }).done(function(response){\n        addLine(response)\n    }).fail(function(retcode, errmsg){\n        addLine('Error: '+retcode+' '+errmsg)\n    })                \n}\n</script>\n<style>\n.result pre{\n    font-family:Courier !important;\n}\n</style>\n<div>\n<slot>\n    <p>Please note: <a href=\"https://github.com/wg/wrk\" target=\"blank\">Wrk</a> is required to be installed on server for benchmark working</p>\n    <div bind:this={el}>\n        <div class=\"form\"/>\n        <div class=\"result\"><pre></pre></div>\n    </div>\n</slot>\n</div>\n",
    "<script context=\"module\">\nlet hashCount = 0\n</script>\n<script>\nimport { importState } from './store.js'\nimport {onMount} from 'svelte'\nexport let expected \nexport let options = {\n    url:'http://localhost/index.html',\n    vefify:(response, xhr)=>{\n        // called after success get content \n        return true //pass\n    },\n    responseType:'',\n    renderResponse:(response)=>{\n        return response\n    },\n}\nlet el\nlet className\nlet tree = importState('tree')\nlet registerAutoTesting = importState('registerAutoTesting')\n\n// compiler willl complain myself, but actually myself is set in main.js\nexport let myself \n\nconst prefix = 'featuretest'\nhashCount += 1\nlet formName = 'featuretest-form' + hashCount\n\nlet expectedLintted = ''\nlet expects = { // expected values defined in loaded htmls\n    status:[200],\n    header:[],\n    response:[]\n}\nconst expectsChecker =  (response, xhr) => {\n    let pass = true\n    if (expects.status.length){\n        let s = new String(xhr.status)\n        expects.status.some(function(re){\n            if (!s.match(re)){\n                console.warn('status error')\n                pass = false\n                return true\n            }\n        })\n        if (!pass) return pass\n        //console.log('status check ok')\n    }\n    if (expects.header.length){\n        let allHeaders = xhr.getAllResponseHeaders()\n        expects.header.some(function(re){\n            if (!allHeaders.match(re)){\n                console.warn('header error')\n                pass = false\n                return true\n            }\n        })\n        if (!pass) return pass\n       // console.log('header check ok')\n    }\n    if (expects.response.length){\n\n        if (typeof response == 'object'){\n            // covert object to json if necessary\n            response = JSON.stringify(response)\n        }\n        \n        expects.response.some(function(re){\n            if (!response.match(re)){\n                console.warn('response error',response,re)\n                pass = false\n                return true\n            }\n        })\n        if (!pass) return pass\n        //console.log('response check ok')\n    }\n    return pass\n}\n\nonMount(async ()=>{\n    // convert <expected> to pretty DOM element\n    if (expected){\n        let lintExpectedLines =  []\n        let pat = /^\\/(.+)\\/([ig]*)$/\n        let lines = expected.innerHTML.split('\\n')        \n        lines.forEach(function(line){\n            line = line.trim()\n            if (line == '') return\n            // add newline to every pure-text line\n            if (line.substr(0,1) != '<') line += '\\n'\n            lintExpectedLines.push(line)\n        })\n        // collect expected value\n        if (expected.querySelector('status')){\n            let ele = expected.querySelector('status')\n            let text = ele.innerText.trim()\n            if (pat.test(text)) {\n                let m = text.match(pat)\n                expects.status.push(new RegExp(m[1],m[2]))\n            }else{\n                expects.status.push(new RegExp(text))\n            }\n        }\n        expected.querySelectorAll('header').forEach(function(ele){\n            let text = ele.innerText.trim()\n            if (pat.test(text)) {\n                let m = text.match(pat)\n                expects.header.push(new RegExp(m[1],m[2]))\n            }else{\n                expects.header.push(new RegExp(text))\n            }            \n        })\n        expected.querySelectorAll('response').forEach(function(ele){\n            let text = ele.innerText.trim()\n            if (pat.test(text)) {\n                let m = text.match(pat)\n                expects.response.push(new RegExp(m[1],m[2]))\n            }else{\n                expects.response.push(new RegExp(text))\n            }\n        })\n        expectedLintted = lintExpectedLines.join('')\n        //convert <status to <div class=\"status\n        var tags2convert = ['status','header','response']\n        tags2convert.forEach(function(tag){\n            expectedLintted = expectedLintted.replace(new RegExp('<'+tag,'g'),'<div class=\"'+tag+'\"')\n            expectedLintted = expectedLintted.replace(new RegExp('</'+tag+'>','g'),'</div>')\n        })\n        expected.remove()\n    }\n   \n    // className could be \"\" if there is no style settting on it,\n    // Svelte compiler would not assign. But if there are multip instance of this component,\n    // they share the same class name.\n    el.className.split(' ').some(function(n){\n        if (/^svelte/.test(n)) {className = n; return true}\n    })\n\n    // increase this value to create uniqe w2form\n    hashCount += 1\n\n    if ($tree){\n        render()\n    }\n\n    // call registerAutoTesting if this page is created by AutoTest compoenent (autotest.svelte)\n    if ($registerAutoTesting){\n        $registerAutoTesting(()=>{\n            return startTeaturetest()\n        })\n    }\n\n})\n\nconst render = () =>{\n\n    const fields = [\n            { name:'url',field: 'url', type: 'textarea', required: true ,html:{caption:'URL To Test', attr:'cols=\"100\" placeholder=\"http://\" style=\"width:98%;height:40px\"'}},\n        ]\n    const record = {\n        url:options.url,\n    }\n    // name will be converted to be \"id\" of <input>,\n    // so to set a unique name is necessary\n    fields.forEach((f)=>{\n        f.name = prefix + f.name\n    })\n    let urecord = {}\n    for (let name in record){\n        urecord[prefix+name] = record[name]\n    }\n    jQuery(el.querySelector('.form')).w2form({ \n        name     : formName,\n        //header   : 'Feature Test',\n        style:'width:100%',\n        fields: fields,\n        record:urecord,\n        actions: {\n            reset: function () {\n                this.clean();\n            },\n            save: function () {\n                startTeaturetest()                \n            }\n        }\n    });\n    el.querySelector('button[name=\"save\"]').innerHTML = 'Run'\n    el.querySelector('button[name=\"reset\"]').style.display = 'none'\n}\n\ntree.subscribe(tree =>{\n    if ($tree == null){\n        if (w2ui['featuretest-form']) w2ui['featuretest-form'].destroy()\n        return\n    }else if (el){\n        render()\n    }    \n})\n\nexport const startTeaturetest = () =>{\n    var promise = new jQuery.Deferred()\n    var record = {}\n    var len = prefix.length\n    var theform = w2ui[formName]\n    if (!theform) {\n        promise.reject('invalid form')\n        return promise\n    }\n    for(let name in theform.record){        \n        record[name.substr(len)] = theform.record[name]\n    }\n    if ((options.validate) &&  !options.validate(record)){\n        promise.reject('invalid record')\n        return promise\n    }\n    var arraybuffer2text = function(abuf){\n        if (typeof abuf == 'string') return abuf\n        var enc = new TextDecoder(\"utf-8\");\n        return enc.decode(abuf)\n    }\n    w2ui[formName].lock('Testing',true)\n    var url = record.url\n    var query = {\n        url:url,\n        data:options.data,\n        dataType:options.dataType\n    }\n    if (options.responseType){\n        query.xhr = function(){\n            var xhr = new XMLHttpRequest();\n            //xhr.responseType= options.responseType\n            //xhr.responseType= 'arraybuffer'\n            xhr.responseType= ''\n            return xhr;\n        }\n    }\n    jQuery.get(query)\n    .done(function(response,status, xhr){\n        console.log('abuf=',typeof response)\n        el.querySelector('.result.http-response').style.display = 'block'        \n        el.querySelector('.result.http-response').innerHTML = '<pre class=\"header\">' + xhr.status+ ' ' + xhr.statusText + '\\n' + xhr.getAllResponseHeaders() + '</pre><pre class=\"response\">' + (options.renderResponse ? options.renderResponse(response) : arraybuffer2text(response)) + '</pre>'\n        var pass = (options.verify) ? options.verify(response, xhr) : expectsChecker(response,xhr)\n        el.querySelector('.result.http-response').classList.add(pass ? 'pass' : 'no-pass')\n        el.querySelector('.result.http-response').classList.remove(pass ? 'no-pass' : 'pass')\n        promise.resolve(pass)\n    })\n    .fail(function(xhr){\n        el.querySelector('.result.http-response').style.display = 'block'\n        el.querySelector('.result.http-response').classList.remove('pass')\n        el.querySelector('.result.http-response').classList.add('no-pass')\n        el.querySelector('.result.http-response').innerHTML = '<pre class=\"header\">' + xhr.status+ ' ' + xhr.statusText + '\\n' + xhr.getAllResponseHeaders() + '</pre><pre class=\"response\">' + xhr.responseText + '</pre>'\n        promise.reject(xhr)\n    })\n    .always(()=>{\n        w2ui[formName].unlock()\n    })\n    return promise\n}\n</script>\n<style>\n\n/* Testing related starts */\n:global(.http-response.expected){\n    text-align:left;\n    white-space:pre;\n    background-color:white !important;\n    border-radius:5px;\n    padding-left:15px;\n    padding-bottom:10px;\n}\n:global(.http-response.expected::before){\n    content:\"Expected\";\n    padding:10px;\n    margin-left:-15px;\n    display:block;\n    border-bottom:solid 1px #c4c2c2;\n    margin-bottom:10px;\n}\n:global(.http-response.expected .status){\n    font-weight: bold;\n}\n:global(.http-response.expected .header){\n    font-weight: bold;\n}\n:global(.http-response.expected .response){\n    margin-top:1em;\n    font-weight: bold;\n}\n\n:global(.http-response){\n    font-family: monospace;\n    white-space: pre;\n    width:100%;\n    border-radius:5px;\n    padding:0px;\n    border:solid 1px #dbdbdb;  \n    overflow:auto;\n\n}\n:global(.http-response.result){\n    display:none;\n\n}\n:global(.http-response.result::before){\n    content:\"Result\";\n    padding:10px;\n    display:block;\n    border-bottom:solid 1px #c4c2c2;\n    margin-bottom:10px;\n}\n:global(.http-response pre){\n    width:100%;\n    padding:10px;\n}\n:global(.http-response .status){\n    /* 載入的 page 當中會有動態增加的內容，所以用 :global() */\n    color:#888;\n}\n:global(.http-response .header){\n    /* 載入的 page 當中會有動態增加的內容，所以用 :global() */\n    color:#888;\n}\n:global(.http-response .response){\n    /* 載入的 page 當中會有動態增加的內容，所以用 :global() */\n}\n:global(.http-response.pass){\n}\n:global(.http-response.pass::after){\n    content: \"PASS\";\n    margin-left: 2px;\n    background-color: #46fd3b;\n    padding: 0px 10px;\n    display: inline-block;\n    line-height: 20px;\n    font-size: 14px;\n}\n:global(.http-response.no-pass){\n}\n:global(.http-response.no-pass::after){\n    content: \"NO-PASS\";\n    margin-left: 2px;\n    color:white;\n    background-color: #fd583b;\n    padding: 0px 10px;\n    display: inline-block;\n    line-height: 20px;\n    font-size: 14px;\n    border-radius: 5px;\n}\n\n.featuretest-box{\n}\n/* Testing related end */\n</style>\n<div bind:this={el}>\n    <slot>\n        <div >\n            <table style=\"width:100%;vertical-align:top\">\n                <tr>\n                    <td style=\"min-width:250px;width:50%;vertical-align:top\"><div class=\"form\"/></td>\n                    <td style=\"width:50%;vertical-align:top;overflow:auto;\"><div class=\"http-response expected\">{@html expectedLintted}</div></td>\n                </tr>\n                <tr>\n                    <td></td>\n                    <td style=\"vertical-align:top\"><div class=\"result http-response\"></div></td>\n                </tr>\n\n            </table>\n            \n        </div>\n    </slot>\n    <!-- let svelte compiler to include related css -->\n    <div style=\"display:none\" class=\"http-response pass no-pass expected\"><pre></pre></div>\n</div>\n",
    "<script context=\"module\">\nlet renderListOfTestingNodes\nexport const  autoTestStart = (rootNode) => {\n    renderListOfTestingNodes(rootNode)\n}\n\n</script>\n\n<script>\nimport { importState, setState, event } from './store.js'\nlet layout = importState('layout')\nimport { onMount } from 'svelte'\nimport { loadNode } from './mainpanel.svelte'\nlet namespace = importState('namespace')\nlet user = importState('user')\nlet message = importState('message')\nlet mainTabs = importState('mainTabs')\n\n//let featuretestInstance = importState('featuretestInstance')\nlet el ;\nlet testingItems = []\n\n// render a list of nodes for testing\nrenderListOfTestingNodes = function(rootNode){\n    if (typeof rootNode == 'undefined') rootNode = w2ui['LeftPanel']\n\n    let nodesOfTest = []\n    var digTestItems = function(node){\n        if (node.nodes && node.nodes.length > 0){\n            node.nodes.forEach((subnode) =>{\n                digTestItems(subnode)\n            })\n        }else if (node.href || node.testings){\n            nodesOfTest.push({node:node, checked:true, completed:false, pass:false})\n        }\n    }    \n    digTestItems(rootNode)\n    testingItems = nodesOfTest.slice()\n}\n\nlet queueOfTestingCalls = []\nlet registerAutoTesting = function(testingCall){\n    queueOfTestingCalls.push(testingCall)\n}\n// a page will call this to register autotesting calls when it is loaded\nsetState('registerAutoTesting',registerAutoTesting)\n\nfunction doTestingOnItem(testingItem){\n    // return a promise which always resove, never reject.\n    // it resolves an array of boolean of pass or no-pass.\n    // ex. [true,false] (pass at 1st testing, no-pass at 2nd testing)\n    var  promise = new jQuery.Deferred()\n    message.set('Testing '+testingItem.node.text)\n    //clean the queue to wait for registering by node's page\n    queueOfTestingCalls = []\n    let resultOfTestings = []\n    // There might be multiple testing items on this Node\n    var startTesting = function(idx){\n        if (idx >= queueOfTestingCalls.length){\n            promise.resolve(resultOfTestings)\n            return\n        }\n        let testingCall = queueOfTestingCalls[idx]\n        try{\n            testingCall().done(function(pass){\n                resultOfTestings.push(pass)\n            })\n            .fail(function(xhr){\n                console.warn(testingItem.node.text,'error=',xhr.responseText)\n                resultOfTestings.push(false)\n            })\n            .always(() => {\n                startTesting(idx + 1)\n            })\n        }catch(e){\n            w2alert(e)\n        }\n    }\n    loadNode(testingItem.node).done(function(){\n        $mainTabs.click('Test')\n        startTesting(0)\n    })\n    return promise\n}\n\nfunction startTest(){\n    var p = new jQuery.Deferred()\n    var activateTesting = function(i){\n        if (i < testingItems.length){\n            if (testingItems[i].checked){\n                doTestingOnItem(testingItems[i]).always(function(testingResults){\n                    // pass if and only all pass\n                    testingItems[i].pass = testingResults.reduce((current,newvalue) => (current && newvalue), true)\n                    testingItems[i].completed = true\n                    activateTesting(i+1)\n                })\n            }else{\n                testingItems[i].completed = true\n                activateTesting(i+1)\n            }\n        }else{\n            p.resolve()\n        }\n    }\n    activateTesting(0)\n    return p\n}\n\n// when use click on list item manually, load that page into main planel\nfunction goPage(evt){\n    var nodeId  = evt.currentTarget.dataset.node\n    testingItems.some(function(testingItem){\n        if (testingItem.node.id == nodeId) {\n            loadNode(testingItem.node)\n            return true\n        }\n    })\n}\n</script>\n<style>\n.node {\n}\n.node.completed.pass{\n    \n}\n.node.completed.no-pass{\n    color:rgb(255, 123, 47);\n}\n</style>\n<div style=\"padding:10px;\">\n    <h4>Auto Test</h4>\n    <div>\n        <button class=\"w2ui-btn\" on:click={startTest}>Start</button>\n    </div>\n    <div bind:this={el}>\n        {#each testingItems as testingItem}\n            <div class=\"node {testingItem.completed ? 'completed' : ''} {testingItem.pass ? 'pass' : 'no-pass'}\">\n                {#if testingItem.completed && testingItem.pass}\n                    <span class='fas fa-check'/>\n                {:else if testingItem.completed && !testingItem.pass}\n                    <span class='fas fa-skull-crossbones'/>\n                {:else}\n                    <input type=\"checkbox\" bind:checked={testingItem.checked}>\n                {/if}\n                 <a href=\"javascript:void(0)\" style=\"text-decoration:none\" data-node={testingItem.node.id} on:click={goPage}>\n                    {testingItem.node.text}\n                 </a>\n            </div>\n        {/each}\n    </div>\n</div>",
    "<script>\nimport { importState, setState, event } from './store.js'\nimport { loadNode } from './mainpanel.svelte'\nimport { autoTestStart } from './autotest.svelte'\nlet namespace = importState('namespace')\nlet user = importState('user')\nlet message = importState('message')\nlet config = importState('config')\nlet layout = importState('layout')\n\nlet username = ''\nlet nodes = [\n    { id: 'overview', text: 'Overview', img: 'icon-folder', expanded: true, group: true,\n        nodes: [ \n             { id: 'settings', text: 'Settings', img:'icon-folder' }\n            ,{ id: 'golang', text: 'Go', img: 'icon-folder', expanded: true , \n                nodes: [\n                    { id: 'goroute', text: 'Route', icon: 'fa-star-empty' },\n                ]}\n            ,{ id: 'python', text: 'Python', img: 'icon-folder', expanded: true, \n                nodes: [\n                    { id: 'pyroute', text: 'Route', icon: 'fa-star-empty' },\n                    { id: 'pyreactor', text: 'Reactor,Event Loops', icon: 'fa-star-empty' },\n                ]}\n            ,{ id:'authentication',text:'Authentication', img:'icon-folder', expanded: true,\n                nodes:[\n\n                ]}\n        ]\n    }\n]\n\nfunction render(){\n    jQuery.getJSON($config.sidebarNodes,(testing_nodes)=>{\n        if (w2ui['LeftPanel']) w2ui['LeftPanel'].destroy()\n        jQuery('.LeftPanel').w2sidebar({\n            name: 'LeftPanel',\n            menu:[\n                { id: 'auto-test', text: 'Auto Testing', img: 'icon-page' },\n            ],\n            nodes: nodes.concat(testing_nodes),\n            topHTML:`<div style=\"height:30px;width:100%;border-bottom:solid 1px #dcdcdc\">\n                <span style=\"color:#999;padding:10px;display:inline-block;cursor:pointer\" class=\"doAutoTest-btn\">\n                    My Test Plan\n                </span>\n                <a style=\"color:#999;float:right;padding:10px;display:inline-block;cursor:pointer\" onclick=\"app.event.fire(\\'refresh-leftpanel\\')\">\n                    <span class=\"fas fa-redo\"> Refresh</span>\n                </a>\n                </div>`,\n            onContextMenu:function(evt){\n                var item = this.get(evt.target)\n                if (!item.nodes || item.nodes.length == 0) {\n                    evt.preventDefault()\n                    return\n                }\n            },\n            onMenuClick:function(evt){\n                switch(evt.menuItem.id){\n                    case 'auto-test':\n                        doAutoTest(this.get(evt.target))\n                        break\n                }\n                \n            },\n            onClick:function(evt){\n                loadNode(evt.node)\n            }\n        });  \n    }).fail(function(err){\n        w2alert(err.responseText)\n    })\n}\nevent.on('refresh-leftpanel',()=>{\n    render()\n    message.set('sidebar refreshed')\n})\nuser.subscribe(value =>{\n    if (value == null) return\n    username = $user.username\n    if (username == 'guest'){\n        //not been login or has logout\n        if (w2ui['LeftPanel']) w2ui['LeftPanel'].destroy()\n    }else{\n        render()\n    }\n})\n\n</script>\n<style>\n.LeftPanel{\n    width:100%;\n    height:100%;\n}\n</style>\n\n<div class=\"LeftPanel\"/>",
    "<script context=\"module\">\n    //auto generate page\n    let generatePageByNode = null\n    let renderPage = null\n    export function loadNode(node){\n        if (node.url) return renderPage(node.url)\n        else if (node.testings) return generatePageByNode(node)\n        else return jQuery.when(true)\n    }\n</script>\n<script>\nimport { onMount, getContext, setContext} from 'svelte';\nimport { tick } from 'svelte';\nimport {  importState, setState, event } from './store.js'\nlet mainTabs = importState('mainTabs')\nlet content = ''\nlet signleton\nlet className \nonMount(()=>{\n    signleton.className.split(' ').some(function(n){\n        if (/^svelte/.test(n)) {className = n; return true}\n    })\n})\n\nlet layout = importState('layout')\n\n/*\nfunction resize(){\n    // size the container \".mainpanel-content\" to fill parent container\n    let box = document.querySelector('.mainpanel-content')\n    let size = $layout.el('main').getBoundingClientRect()\n    box.style.width = size.width + 'px'\n    box.style.height = size.height + 'px'\n}\n*/\n\nrenderPage = function (url) {\n    console.log('render '+url)\n    var promise = new jQuery.Deferred()\n    jQuery.get(url,async function(response){\n        renderResponse(response,promise)\n    })\n    return promise\n}\n\n// node comes from left-panel\ngeneratePageByNode = function(node){\n    var promise = new jQuery.Deferred()\n    let testings = []\n    node.testings.forEach((testing) =>{\n        testings.push('<featuretest url=\"' + testing.query.url + '\">')\n        testings.push('    <expected>')\n        if (testing.expected.status) {\n            let statusArray = typeof testing.expected.status == 'string' ? [testing.expected.status] : testing.expected.status\n            statusArray.forEach((status) => {testings.push('        <status>' + status + '</status>')})\n        }\n        if (testing.expected.header) {\n            let headerArray = typeof testing.expected.header == 'string' ? [testing.expected.header] : testing.expected.header\n            headerArray.forEach((header) => {testings.push('       <header>' + header + '</header>')})\n        }\n        if (testing.expected.response){\n            let responseArray = typeof testing.expected.response == 'string' ? [testing.expected.response] : testing.expected.response\n            responseArray.forEach((response) => {testings.push('     <response>' + response + '</response>')})\n        }\n        testings.push('    </expected>')\n        testings.push('</featuretest>')\n    })\n    var testingTags = testings.join('    \\n')\n\n    var response = `\n<div class=\"mainpanel-page\">\n    <div class=\"tabs\" style=\"height:30px\">\n        <tab data-id=\"Test\" data-active=\"1\">Test</tab>\n        <tab data-id=\"Benchmark\">Benchmark</tab>\n        <tab data-id=\"Doc\">Docs</tab>\n    </div>\n    <div class=\"tab-content Test\">\n        ${testingTags}\n    </div>\n    <div class=\"tab-content Benchmark\"></div>\n    <div class=\"tab-content Docs\"></div>\n</div>\n    `\n    renderResponse(response,promise)\n    return promise\n}\n\nconst renderResponse = async function(response,promise){\n\n    if (response.indexOf('</featuretest>') > 0 || response.indexOf('</benchmark>') > 0) {\n        const jsToCollectAndRegister = `\n        <script>\n            document.querySelectorAll('.mainpanel-page featuretest').forEach(function(featuretest){\n                app.registerFeatureTest({\n                    target: featuretest,\n                    props:{\n                        expected:featuretest.querySelector('expected'),\n                        options:{\n                            url:featuretest.getAttribute('url'),\n                        }\n                    }\n                })\n            })\n            document.querySelectorAll('.mainpanel-page benchmark').forEach(function(benchmark){\n                app.registerBenchmark({\n                    target: benchmark,\n                    props:{\n                        options:{\n                            url:benchmark.getAttribute('url'),\n                        }\n                    }\n                })\n            })\n        <\\/script>`\n        response += jsToCollectAndRegister\n    }\n    jQuery('.mainpanel-content.'+className).html(response)\n    // wait DOM to be updated\n    await tick()\n\n\n    // size the container \".mainpanel-content\" to fill parent container\n    let box = $layout.el('main').querySelector('.mainpanel-content')\n    let size = $layout.el('main').getBoundingClientRect()\n    box.style.width = size.width + 'px'\n    box.style.height = size.height + 'px'    \n        \n    // add Classname to injected elements to let CSS take effecitve\n    box.querySelectorAll('.tab-content, code, .code, .code p, .code pre, .http-response, .http-response.pass, .http-response.no-pass').forEach(function(ele){\n        ele.classList.add(className)\n    })\n\n    let tabsEle = box.querySelector('.tabs')\n    let tabs = []\n    let active_tab = ''\n    tabsEle.querySelectorAll('tab').forEach(function(ele){\n        tabs.push({id:ele.dataset['id'], caption:ele.innerHTML})\n        if (ele.dataset['active']) active_tab = ele.dataset['id']\n    })\n    if (w2ui['main-tabs']) w2ui['main-tabs'].destroy()\n    jQuery(tabsEle).w2tabs({\n        name:'main-tabs',\n        tabs:tabs,\n        active:active_tab,\n        onClick:function(evt){\n            active_tab = evt.target\n            evt.done(function(){\n                if (box.querySelector('.tab-content.active')){\n                    box.querySelector('.tab-content.active').classList.remove('active')\n                }\n                box.querySelector('.tab-content.'+active_tab+'.'+className).classList.add('active')\n                event.fire('mainpanel-active-tab',active_tab)\n            })\n        }\n    })\n    jQuery(tabsEle).show()\n    w2ui['main-tabs'].click(active_tab)\n    mainTabs.set(w2ui['main-tabs'])\n    await tick()\n    setTimeout(function(){\n        promise.resolve()\n    },100)\n    \n}\n\n\n</script>\n<style>\n.mainpanel-content{\n    display:flex;\n    align-items:stretch;\n    flex-direction:column;\n    background-color:white;\n}\n\n/* \n方法一：\nBelow are CSS classes used by content in loadded page (ex. staticfile.html) by @html.\nThe Svelte does not append Svelte-specific class to them,\nSo we have to escalate :global()\n方法二：\n取得此component的classname，將此classname加入所有的相關class中\n*/\n.tab-content{\n    display: none;\n    width:100%;\n    background-color:white;\n    padding:15px;\n}\n.tab-content.active{\n    display:block;\n}\n.tab-content p{\n    padding-left:20px;\n}\ncode{\n    font-weight: bold;\n    background-color: #f5f5f5;\n    padding: 2px;\n    border-radius:2px;\n}\n.code pre{\n    margin:5px 0px;\n    padding:10px 20px;\n    font-size:1.0em;\n    outline: 1px solid #cccccc;\n    font-family:monospace;\n    background-color: cornsilk;\n}\n.code p{\n    margin:0;\n    padding:0;\n}\n\n</style>\n{#if true}\n    <div bind:this={signleton} class=\"mainpanel-content\"></div>\n{:else}\n    <!-- 為了讓Svelte將style中的css compile 進去，因為只有用到的css才會被compile進去 -->\n    <div class=\"tab-content active\"></div>\n    <div class=\"code\"><p></p><pre></pre></div>\n    <code/>\n    <div class=\"http-response pass error\"></div>\n    <div class=\"http-response\"><div class=\"header\"></div></div>\n{/if}",
    "<script>\n/*\nEvents:\n    1. login-succeed, 此listener會在login成功的event之前(aka setState(\"user\") 事件）\n    先被呼叫。 SDK 利用來建立tree物件，讓其他收到 login 成功事件的listener可使用\n\n    2.then  setState(\"user\",{username:<not guest>}), when login succeed\n*/\nimport { onMount } from 'svelte';\nimport { getState, setState, event } from './store.js'\nlet config = getState('config')\nlet user = getState('user')\nlet username = 'guest'\nfunction doLogin(_username,_password,callback){\n    let data\n    if (_username){\n        data = {username:_username,password:_password}\n    }else{\n        data = {}\n    }\n    jQuery.getJSON($config.loginUrl,data, function(response){\n        if (response.username)  {\n            username = response.username\n            user.set({username:username})\n            if (callback) callback(true,response)           \n        }\n        else {\n            if (callback) callback(false)\n        }\n    })\n\n}\nonMount(async ()=>{\n    doLogin(null,null)\n})\nfunction logout(){\n    w2confirm(\n        'Are you sure to logout?',\n        function(yes){\n            if (yes != 'Yes') return\n            jQuery.get($config.logoutUrl,function(response){\n                username = 'guest'\n                user.set({username:username})\n            })\n        }\n    )\n}\nfunction login(){\n    w2popup.open({\n        title:'Login',\n        body:jQuery('.loginform-template .loginform').clone(),\n        buttons:'<button class=\"w2ui-btn login\">Login</button>'\n    })\n    jQuery('#w2ui-popup button.login').on('click',function(){\n        let name = jQuery('#w2ui-popup input.username').val()\n        let password = jQuery('#w2ui-popup input.password').val()\n        if (name && password){\n            doLogin(name,password,function(success,response){\n                if (success) {\n                    w2popup.close()\n                }\n                else jQuery('#w2ui-popup .message').html('try again')\n            })\n        }\n    })\n}\n</script>\n<style>\n.loginform{\n\n}\n.loginform input{\n    display: block;\n    padding: 10px;\n}\n</style>\n\n<span class=\"fas fa-user\"></span>\n{#if username=='guest'}\n    <a  href=\"javascript:void(0);\" on:click=\"{login}\"><span>Login</span></a>\n{:else}\n    <a  href=\"javascript:void(0);\" on:click=\"{logout}\"><span title=\"{username}\">Logout</span></a>\n{/if}\n\n<div style=\"display:none\" class=\"loginform-template\">\n    <div class=\"loginform w2ui-center\">\n        <div class=\"message\">&nbsp;</div>\n        <input class=\"username\" placeholder=\"username\"/>\n        <input class=\"password\" type=\"password\"/>\n    </div>\n</div>"
  ],
  "names": [],
  "mappings": "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"
}